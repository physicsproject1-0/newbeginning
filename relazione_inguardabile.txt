DISCLAIMER: questa non è il formato giusto, bisogna farlo bene (in lattice/pdf). 
però intanto butto giù qualche riga altrimenti mi scordo le cose.

Relazione progetto di programmazione per la fisica 20/21: simulazione di una pandemia 
Autori: Simone Piraccini, Simone Garnero, kingdellaprogrammazione aka Edo 

Parte I: modello SIR

Il modello che rappresenta lo sviluppo della nostra pandemia è il modello SIR, dove S sta per suscettibili, I sta per infetti ed R sta per rimossi (morti o guariti).
Si basa su tre equazioni differenziali caratterizzate da due parametri β e γ che indicano rispettivamente la velocità del contagio e 
quella della fine dell’infezione; tutte le persone della stessa categoria sono indistinguibili.
Ad ogni nuovo giorno la situazione si aggiorna secondo l’algoritmo che segue le equazioni sopra citate, insieme ai dati della giornata precedente.

Abbiamo creato una struct ‘State’ che contenesse i valori caratterizzanti un determinato istante della simulazione, ovvero il giorno 
corrente ed i rispettivi valori di S, I, R. 
La classe ‘SIR’ invece contiene i dati necessari al funzionamento del modello, ovvero uno State stato iniziale, i parametri beta e gamma, insieme alla durata della simulazione.
Tiene conto anche del valore (costante per tutta la durata della simulazione) dato dal totale delle persone presenti.
‘Insert’ è la funzione che gestisce l’input e ritorna un oggetto della classe SIR: vengono richiesti quindi all’utente i valori dei parametri beta e gamma 
(decimali tra 0 e 1), il numero di persone suscettibili, infette e rimosse; infine è necessario inserire la durata della simulazione.

Le funzioni membro ‘riempimento’ e ‘convertitore’ sono chiamate per compiere la vera e propria simulazione dal punto di vista
quantitativo: entrambe ritornano uno standard vector di ‘State’, il primo con dati grezzi, il secondo riporta approssimati all’unità i valori di S, I, R. 
Grazie ad un ciclo for, ‘riempimento’ inserisce i dati nell’algoritmo per generare la giornata successiva e con pushback() riempie il vettore.
Sempre con un ciclo for, ‘convertitore’ (che ha come oggetto il vettore appena creato) approssima all’unità il numero di S, I, R  










Parte II: Simulazione grafica

Per la seconda parte del progetto abbiamo deciso di realizzare due simulazioni grafiche stilizzate di una pandemia.

Simulazione I

La prima consiste in un campione di persone che si muovono all'interno di un territorio delimitato. Anche in questo caso abbiamo mantenuto l'idea 
di distinguere soggetti suscettibili, inffetti e rimossi, con l'aggiunta che i rimossi si suddivideranno in deceduti e guariti. Lo stato dei soggetti si
distingue grazie al loro colore: verde per i suscettibili, rosso per gli infetti, grigio per i deceduti e azzurro per i guariti.
All'inizio di ogni simulazione uno a caso dei soggetti risulta positivo. Ogni persona si muove con una velocità casuale e nel momento in cui un infetto
entra in contatto con un suscettibile ha una probabilità del 30% di infettarlo. Dopo che un soggetto infetto è entrato in contatto con 35 persone 
diventa rimosso. A questo punto ha una probabilità del 30% di morire e una del 70% di guarire.

A livello più tecnico i soggetti sono definiti dalla classe "Persona". Gli stati del modello SIR sono forniti da una "enum class Status" e la colorazione dei soggetti è data da una serie di funzioni come
"setGreenTexure" che in base allo stato assegna la texture corretta. Le texture colorate sono contenute nello stesso file .png e vengono ritagliate 
da queste funzioni. Il movimento delle persone è invece descritto dalle funzioni "Aggiorna_griglia" e "Aggiorna_lista". C'è poi una funzione che assicura
che le persone non escano dai bordi della nostra simulazione: "Check_borders". Per verificare l'effettivo contagio dei soggetti abbiamo la funzione "Collisione"
che controlla quando due soggetti entrano a contatto e, se uno dei due è infetto, rende infetto anche l'altro. La probabilità di contagio è stata ottenuta grazie al metodo
rand(). Per passare allo stato "RIMOSSO" ci sono invece le funzioni "Conteggio_contatti" e "Morte_persona". La prima conta appunto il numero di contatti 
con le altre persone che un soggetto ha avuto dal momento in cui è diventato infetto; la seconda invece cambia lo stato di un soggetto da infetto a rimosso
nel momento in cui ha raggiunto 35 contatti. Nella funzione "SetWhiteTextures" abbiamo distinto i deceduti dai guariti in base a una probabilità data Sempre
dalla funzione rand(). Tutte queste funzioni sono metodi di una stessa classe, la classe "Animazione".



Simulazione II 

La seconda simulazione consiste in un automa cellulare costituito da una griglia 

