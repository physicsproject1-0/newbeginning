Relazione progetto di programmazione per la fisica 20/21: simulazione di una pandemia 
Autori: Simone Piraccini, Simone Garnero, Edoardo Frulla 

Parte I: modello SIR

Il modello che rappresenta lo sviluppo della nostra pandemia è il modello SIR, dove S sta per suscettibili, I sta per infetti ed R sta per rimossi (morti o guariti).
Si basa su tre equazioni differenziali caratterizzate da due parametri β e γ che indicano rispettivamente la velocità del contagio e 
quella della fine dell’infezione; tutte le persone della stessa categoria sono indistinguibili.
Ad ogni nuovo giorno la situazione si aggiorna secondo l’algoritmo che segue le equazioni sopra citate, insieme ai dati della giornata precedente.

Abbiamo creato una struct ‘State’ che contenesse i valori caratterizzanti un determinato istante della simulazione, ovvero il giorno 
corrente ed i rispettivi valori di S, I, R. 
La classe ‘SIR’ invece contiene i dati necessari al funzionamento del modello, ovvero uno State stato iniziale, i parametri beta e gamma, insieme alla durata della simulazione.
Tiene conto anche del valore (costante per tutta la durata della simulazione) dato dal totale delle persone presenti.
‘Insert’ è la funzione che gestisce l’input e ritorna un oggetto della classe SIR: vengono richiesti quindi all’utente i valori dei parametri beta e gamma 
(decimali tra 0 e 1), il numero di persone suscettibili, infette e rimosse; infine è necessario inserire la durata della simulazione.

Le funzioni membro ‘riempimento’ e ‘convertitore’ sono chiamate per compiere la vera e propria simulazione dal punto di vista
quantitativo: entrambe ritornano uno std::vector di ‘State’, il primo con dati grezzi, il secondo riporta approssimati all’unità i valori di S, I, R. 
Grazie ad un ciclo for, ‘riempimento’ inserisce i dati nell’algoritmo per generare la giornata successiva e con pushback() riempie il vettore.
Sempre con un ciclo for, ‘convertitore’ (che ha come oggetto il vettore appena creato) approssima all’unità il numero di S, I, R  
in modo da rispettare i seguenti criteri: 
- il numero di suscettibili non può aumentare rispetto alla giornata precedente
- il numero di rimossi non può diminuire rispetto alla giornata precedente
- se il numero di infetti è zero la situazione si stabilizza e i valori si mantengono inalterati il giorno seguente
- quando tali condizioni sono soddisfatte, il sistema approssima per eccesso i valori con decimale più alto in modo da mantenere S+I+R=N

Per verificare il corretto funzionamento di queste funzioni abbiamo scritto un file di test (doctest) per situazioni particolari facilmente
intuibili a priori. 
L'output è rappresentato dalla storia della simulazione, stampata su standard output, e da un grafico gnuplot che riporta le curve di andamento della popolazione.
Per visualizzare il grafico è necessario gnuplot installato abbinato ad un xserver per l'apertura della finestra grafica.
Per la compilazione è possibile utilizzare CMake, oppure il comando "g++ main.cpp newSIR.cpp plot.cpp". Per verificare i test basta sostituire il file di test
al posto del main.
E' possibile ottenere output in formati diversi (implementati attraverso la libreria "Lyra"). Per scegliere formato bisogna bisogna aggiungere durante la compilazione
"-f <opzione>" oppure "--formato <opzione>". I formati disponibili e le parole chiave da inserire in sede di compilazione sono:
- "grafico"  , per ottenere in output solo grafico
- "virgola" , per ottenere i valori separati da virgola
- "spazio" , per ottenere i valori separati da spazio
Nel caso in cui non venga inserita nessuna opzione l'output conterrà sial il grafico che una tabella per i valori.
Compilando con -Wall -Wextra appaiono dei warnings dovuti all'utilizzo della libreria "lyra" (già comunicato).





Parte II: Simulazione grafica

Per la seconda parte del progetto abbiamo deciso di realizzare due simulazioni grafiche stilizzate di una pandemia. Entrambe si trovano sulla stessa 
finestra grafica in cui è presente una Graphic User Interface che permette di passare da una all'altra e di mettere in pausa l'animazione.
In alto a destra è poi disponibile un piccolo grafico che dà un'idea dell'andamento totale della popolazione e un'interfaccia che permette di 
vedere in tempo reale i numeri di persone in ogni stato (Suscettibile, infetto, guarito, morto). 
Per compilare è possibilizzare utilizzare CMake oppure i comandi "g++ -c main.cpp classe.cpp gui.cpp finestra.cpp animazione.cpp automa.cpp", 
"g++ main.o classe.o gui.o finestro animazione.o automa.o -lsfml-graphics -lsfml-window -lsfml-system". Compilando con i comandi -Wall -Wextra -fsanitize=address
appaiono warnings dovuti ad 'unused parameter' nella funzione draw di sfml. Alla chiusura della finestra grafica rimane un memory leak di 56 bytes (già comunicato).


Simulazione I

La prima consiste in un campione di persone che si muovono all'interno di un territorio delimitato. In questo caso abbiamo deciso 
di distinguere soggetti suscettibili, infetti, guariti e morti. Lo stato dei soggetti si
distingue grazie al loro colore: verde per i suscettibili, rosso per gli infetti, grigio per i morti e azzurro per i guariti.
Gli infetti vengono distribuiti randomicamente all'interno della regione. Ogni persona si muove con una velocità casuale e nel momento in cui un infetto
entra in contatto con un suscettibile ha una certa probabilità di infettarlo. Dopo che un soggetto infetto è entrato in contatto con un elevato numero di 
persone (influenzato dal parametro gamma) diventa morto o guarito. La percentuale di morte è 30%, quella di guarigione 70%.

Abbiamo costituito una classe "Animazione" che contiene tutto l'ambiente. Abbiamo creato una struct "Persona" che rappresenta ogni singolo omino sull'interfaccia grafico. 
Una enum class "Stato" assegna a ogni persona uno dei 4 stati (Suscettibile, Infetto, Morto, Guarito).
All'interno della classe Animazione abbiamo un vertexArray che ospita tutte le coordinate delle persone, i vertici consecutivi (unica persona) sono raggruppati a formare triangoli. 
Ogni persona è definita quindi sulla finestra da 3 coordinate.
Tutte le persone sono raggruppate in una std::map, membro della classe Animazione. I diversi colori delle persone sono dati da diverse texture, tutte
nello stesso file "uomini.png". Per assegnare ai membri con lo stesso stato il medesimo colore, una funzione (SetAllTextures) ritaglia il png ed incolla la texture

La funzione membro Collisione() gestisce l'infettività, mentre Conteggio_contatti() e Morte_persona() controllano l'uscita dall'infezione.




Simulazione II 

La seconda simulazione consiste in un automa cellulare costituito da una griglia 

